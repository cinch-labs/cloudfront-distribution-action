---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a CloudFront Distribution using a subdirectory of an existing S3 bucket as origin
Parameters:
  BucketName:
    Type: String
    Description: Name of the bucket used as cloudfront origin.
  SubdirectoryName:
    Type: String
    Description: The name of the subdirectory to use as origin path
  Route53ZoneId:
    Type: String
    Description: Route53 Zone ID for hosted zone in Route53 for subdomain group
  CertificateARN:
    Type: String
    Description: ARN of wildcard certificate that covers subdomain we are adding
  WebsiteCloudFrontViewerRequestLambdaFunctionARN:
    Type: String
    Description: ARN of the Lambda@Edge function that provides basic auth and does rewriting of URLs (must be in us-east-1). See index.js
    Default: ''
  OriginAccessIdentityARN:
    Type: String
    Description: ARN of the OAI allowing access to the bucket resources
  CloudFrontAliases:
    Type: CommaDelimitedList
    Description: Full domain name for CloudFront
  WebACLId:
    Type: String
    Description: Arn of AWS WAF web ACL
    Default: ''
  ARecordName:
    Type: String
    Description: Name given to the A record
    Default: ''
  ManagedCachingOptimizedCachePolicyId:
    Type: String
    Description: The ID of the Managed-CachingOptimized cache policy, for enabling Brotli compression
    Default: 658327ea-f89d-4fab-a63d-7e88639e58f6

Conditions:
  HasLambdaARN: !Not [!Equals [!Ref WebsiteCloudFrontViewerRequestLambdaFunctionARN, '']]
  HasNoLambdaARN: !Equals [!Ref WebsiteCloudFrontViewerRequestLambdaFunctionARN, '']
  HasWebACLSpecified: !Not [!Equals [!Ref WebACLId, '']]
  CreatesARecord: !Not [!Equals [!Ref ARecordName, '']]

Resources:
  WebsiteCloudfrontWithLambda:
    Condition: HasLambdaARN
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref 'SubdirectoryName'
        Origins:
          - DomainName: !Join ['', [!Ref BucketName, '.s3.amazonaws.com']]
            Id: s3origin
            OriginPath: !Join ['', ['/', !Ref SubdirectoryName]]
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref OriginAccessIdentityARN]]
        DefaultCacheBehavior:
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          CachePolicyId: !Ref 'ManagedCachingOptimizedCachePolicyId'
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 2419200
          ForwardedValues:
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref WebsiteCloudFrontViewerRequestLambdaFunctionARN
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
        Aliases: !Ref CloudFrontAliases
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateARN
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
        PriceClass: PriceClass_100
        WebACLId:
          Fn::If:
            - HasWebACLSpecified
            - !Ref WebACLId
            - !Ref AWS::NoValue

      Tags:
        - Key: Name
          Value: !Join [' ', [!Ref BucketName, !Ref SubdirectoryName]]

  WebsiteCloudfrontWithoutLambda:
    Condition: HasNoLambdaARN
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref 'SubdirectoryName'
        Origins:
          - DomainName: !Join ['', [!Ref BucketName, '.s3.amazonaws.com']]
            Id: s3origin
            OriginPath: !Join ['', ['/', !Ref SubdirectoryName]]
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref OriginAccessIdentityARN]]
        DefaultCacheBehavior:
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          CachePolicyId: !Ref 'ManagedCachingOptimizedCachePolicyId'
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 300
          ForwardedValues:
            QueryString: true
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
        Aliases: !Ref CloudFrontAliases
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateARN
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
        PriceClass: PriceClass_100
        WebACLId:
          Fn::If:
            - HasWebACLSpecified
            - !Ref WebACLId
            - !Ref AWS::NoValue

      Tags:
        - Key: Name
          Value: !Join [' ', [!Ref BucketName, !Ref SubdirectoryName]]

  BranchWWWAlias:
    Type: AWS::Route53::RecordSet
    Condition: CreatesARecord
    Properties:
      HostedZoneId: !Ref Route53ZoneId
      Name: !Ref ARecordName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # Default/public - this is always the hostedZoneId for CloudFormation (see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html#cfn-route53-aliastarget-hostedzoneid)
        DNSName:
          !If [HasLambdaARN, !GetAtt WebsiteCloudfrontWithLambda.DomainName, !GetAtt WebsiteCloudfrontWithoutLambda.DomainName]

Outputs:
  WebsiteCloudfront:
    Description: WebsiteCloudfront
    Value: !If [HasLambdaARN, !GetAtt WebsiteCloudfrontWithLambda.DomainName, !GetAtt WebsiteCloudfrontWithoutLambda.DomainName]
  WebsiteAlias:
    Description: WebsiteAlias
    Value: !Select ['0', !Ref CloudFrontAliases]
